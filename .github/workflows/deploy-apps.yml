name: Deploy Apps to GitHub Pages

on:
  push:
    branches:
      - main
    paths:
      - '*/package.json'
      - '*/index.html'
      - '*/**'
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '*/package.json'
      - '*/index.html'
      - '*/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
      pull-requests: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Process apps
        run: |
          # Test PR preview deployment
          # Create a directory for the built apps
          mkdir -p _site

          # Set the output directory based on whether this is a PR or main branch
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            OUTPUT_DIR="_site/pr-${{ github.event.pull_request.number }}"
            mkdir -p $OUTPUT_DIR
          else
            OUTPUT_DIR="_site"
          fi

          # Process each app directory
          for APP in */; do
            APP=${APP%/}  # Remove trailing slash
            
            # Skip special directories
            if [[ "$APP" == "_site" || "$APP" == ".*" || "$APP" == "node_modules" || "$APP" == ".git" || "$APP" == ".github" ]]; then
              continue
            fi
            
            echo "Processing $APP"
            
            if [ -f "$APP/package.json" ]; then
              echo "Building Node.js app: $APP"
              cd $APP
              npm install
              npm run build
              
              # Copy build output to output directory
              if [ -d "build" ]; then
                mkdir -p ../$OUTPUT_DIR/$APP
                cp -r build/* ../$OUTPUT_DIR/$APP/
              elif [ -d "dist" ]; then
                mkdir -p ../$OUTPUT_DIR/$APP
                cp -r dist/* ../$OUTPUT_DIR/$APP/
              fi
              cd ..
            elif [ -f "$APP/index.html" ]; then
              echo "Static site detected: $APP"
              mkdir -p $OUTPUT_DIR/$APP
              cp -r $APP/* $OUTPUT_DIR/$APP/
            fi
          done
          
          # Create index page
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "<html><head><title>PR #${{ github.event.pull_request.number }} Preview</title><style>body{font-family:sans-serif;max-width:800px;margin:2rem auto;padding:0 1rem}</style></head><body>" > $OUTPUT_DIR/index.html
            echo "<h1>PR #${{ github.event.pull_request.number }} Preview</h1>" >> $OUTPUT_DIR/index.html
            echo "<p><a href='../'>&larr; Back to main site</a></p><ul>" >> $OUTPUT_DIR/index.html
          else
            echo "<html><head><title>Hive Apps</title><style>body{font-family:sans-serif;max-width:800px;margin:2rem auto;padding:0 1rem}</style></head><body>" > $OUTPUT_DIR/index.html
            echo "<h1>Hive Apps</h1><ul>" >> $OUTPUT_DIR/index.html
          fi
          
          for APP in $OUTPUT_DIR/*/; do
            APP=${APP%/}  # Remove trailing slash
            APP=${APP##*/}  # Get just the directory name
            if [ "$APP" != "index.html" ]; then
              echo "<li><a href='$APP'>$APP</a></li>" >> $OUTPUT_DIR/index.html
            fi
          done
          echo "</ul></body></html>" >> $OUTPUT_DIR/index.html

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const previewUrl = `${{ steps.deployment.outputs.page_url }}pr-${{ github.event.pull_request.number }}/`;
            const comment = `ðŸš€ Preview deployment is ready!\n\nView your changes at: ${previewUrl}`;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.name,
              issue_number: context.issue.number,
              body: comment
            });